// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	models " hery-ciaputra/assignment-05-golang-backend/models"
	mock "github.com/stretchr/testify/mock"
)

// WalletRepository is an autogenerated mock type for the WalletRepository type
type WalletRepository struct {
	mock.Mock
}

// GetTransactions provides a mock function with given fields: id, filter
func (_m *WalletRepository) GetTransactions(id int, filter *models.Filter) ([]*models.Transaction, error) {
	ret := _m.Called(id, filter)

	var r0 []*models.Transaction
	if rf, ok := ret.Get(0).(func(int, *models.Filter) []*models.Transaction); ok {
		r0 = rf(id, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, *models.Filter) error); ok {
		r1 = rf(id, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWallet provides a mock function with given fields: id
func (_m *WalletRepository) GetWallet(id int) (*models.Wallet, error) {
	ret := _m.Called(id)

	var r0 *models.Wallet
	if rf, ok := ret.Get(0).(func(int) *models.Wallet); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Wallet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TopUpWallet provides a mock function with given fields: id, up
func (_m *WalletRepository) TopUpWallet(id int, up *models.Transaction) (*models.Transaction, error) {
	ret := _m.Called(id, up)

	var r0 *models.Transaction
	if rf, ok := ret.Get(0).(func(int, *models.Transaction) *models.Transaction); ok {
		r0 = rf(id, up)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, *models.Transaction) error); ok {
		r1 = rf(id, up)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransferWallet provides a mock function with given fields: id, tu
func (_m *WalletRepository) TransferWallet(id int, tu *models.Transaction) (*models.Transaction, error) {
	ret := _m.Called(id, tu)

	var r0 *models.Transaction
	if rf, ok := ret.Get(0).(func(int, *models.Transaction) *models.Transaction); ok {
		r0 = rf(id, tu)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, *models.Transaction) error); ok {
		r1 = rf(id, tu)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewWalletRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewWalletRepository creates a new instance of WalletRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewWalletRepository(t mockConstructorTestingTNewWalletRepository) *WalletRepository {
	mock := &WalletRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
