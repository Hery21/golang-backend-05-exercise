// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	models " hery-ciaputra/assignment-05-golang-backend/models"
	mock "github.com/stretchr/testify/mock"
)

// RegisterRepository is an autogenerated mock type for the RegisterRepository type
type RegisterRepository struct {
	mock.Mock
}

// Register provides a mock function with given fields: user
func (_m *RegisterRepository) Register(user *models.User) (*models.Register, error) {
	ret := _m.Called(user)

	var r0 *models.Register
	if rf, ok := ret.Get(0).(func(*models.User) *models.Register); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Register)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterWallet provides a mock function with given fields: wallet
func (_m *RegisterRepository) RegisterWallet(wallet *models.Wallet) (*models.Wallet, error) {
	ret := _m.Called(wallet)

	var r0 *models.Wallet
	if rf, ok := ret.Get(0).(func(*models.Wallet) *models.Wallet); ok {
		r0 = rf(wallet)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Wallet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.Wallet) error); ok {
		r1 = rf(wallet)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRegisterRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRegisterRepository creates a new instance of RegisterRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRegisterRepository(t mockConstructorTestingTNewRegisterRepository) *RegisterRepository {
	mock := &RegisterRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
